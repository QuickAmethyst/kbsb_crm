// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"

	"github.com/google/uuid"
)

type Field struct {
	ID             uuid.UUID     `json:"id"`
	ObjectID       uuid.UUID     `json:"objectID"`
	OrganizationID int           `json:"organizationID"`
	Label          string        `json:"label"`
	DataType       FieldDataType `json:"dataType"`
	DefaultValue   *string       `json:"defaultValue,omitempty"`
	IsIndexed      bool          `json:"isIndexed"`
	IsRequired     bool          `json:"isRequired"`
}

type ObjectsInput struct {
	ID     *uuid.UUID   `json:"id,omitempty"`
	Paging *PagingInput `json:"paging,omitempty"`
}

type ObjectsResult struct {
	Data   []Object `json:"data"`
	Paging *Paging  `json:"paging"`
}

type PicklistValues struct {
	ID      uuid.UUID `json:"id"`
	FieldID uuid.UUID `json:"fieldID"`
	Value   string    `json:"value"`
}

type Record struct {
	ID       uuid.UUID              `json:"id"`
	ObjectID uuid.UUID              `json:"objectID"`
	Data     map[string]interface{} `json:"data"`
}

type RecordFilter struct {
	FieldID uuid.UUID `json:"fieldID"`
	Value   string    `json:"value"`
}

type RecordsInput struct {
	Filters []RecordFilter `json:"filters,omitempty"`
	Paging  *PagingInput   `json:"paging,omitempty"`
}

type RecordsResult struct {
	Data   []Record `json:"data"`
	Paging *Paging  `json:"paging"`
}

type WriteFieldInput struct {
	ObjectID       uuid.UUID     `json:"objectID"`
	Label          string        `json:"label"`
	DataType       FieldDataType `json:"dataType"`
	DefaultValue   *string       `json:"defaultValue,omitempty"`
	IsIndexed      bool          `json:"isIndexed"`
	IsRequired     bool          `json:"isRequired"`
	PicklistValues []string      `json:"picklistValues,omitempty"`
}

type WriteRecordInput struct {
	ObjectID uuid.UUID              `json:"objectID"`
	Data     map[string]interface{} `json:"data"`
}

type FieldDataType string

const (
	FieldDataTypeString   FieldDataType = "string"
	FieldDataTypeNumber   FieldDataType = "number"
	FieldDataTypeDate     FieldDataType = "date"
	FieldDataTypePicklist FieldDataType = "picklist"
)

var AllFieldDataType = []FieldDataType{
	FieldDataTypeString,
	FieldDataTypeNumber,
	FieldDataTypeDate,
	FieldDataTypePicklist,
}

func (e FieldDataType) IsValid() bool {
	switch e {
	case FieldDataTypeString, FieldDataTypeNumber, FieldDataTypeDate, FieldDataTypePicklist:
		return true
	}
	return false
}

func (e FieldDataType) String() string {
	return string(e)
}

func (e *FieldDataType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = FieldDataType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid FieldDataType", str)
	}
	return nil
}

func (e FieldDataType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
