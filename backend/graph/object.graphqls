extend type Query {
    objects(input: ObjectsInput): ObjectsResult!
    records(objectID: UUID!, input: RecordsInput): RecordsResult!
    fields(objectID: UUID!): [Field!]!
}

extend type Mutation {
    storeObject(input: WriteObjectInput!): Object!
    storeField(input: WriteFieldInput!): Field!
    storeRecord(input: WriteRecordInput!): Record!
}

type ObjectsResult {
    data: [Object!]!
    paging: Paging!
}

input ObjectsInput {
    id: UUID
    paging: PagingInput
}

type RecordsResult {
    data: [Record!]!
    paging: Paging!
}

input RecordsInput {
    filters: [RecordFilter!]
    paging: PagingInput
}

input RecordFilter {
    fieldID: UUID!
    value: String!
}

input WriteRecordInput {
    objectID: UUID!
    data: Map!
}

type Record {
    id: UUID!
    objectID: UUID!
    data: Map!
}

input WriteFieldInput {
    objectID: UUID!
    label: String!
    dataType: FieldDataType!
    defaultValue: String
    isIndexed: Boolean!
    isRequired: Boolean!
    picklistValues: [String!]
}

type Field {
    id: UUID!
    objectID: UUID!
    organizationID: Int!
    label: String!
    dataType: FieldDataType!
    defaultValue: String
    isIndexed: Boolean!
    isRequired: Boolean!
}

enum FieldDataType {
    string
    number
    date
    picklist
}

input WriteObjectInput {
    name: String!
    description: String
}

type Object {
    id: UUID!
    organizationID: Int!
    name: String!
    description: String
}